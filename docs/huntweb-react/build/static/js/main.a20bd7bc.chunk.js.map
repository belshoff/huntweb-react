{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/products/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseUrl","main","state","products","filter","page","loadProducts","get","params","then","res","data","docs","setState","prevPage","nextPage","pages","this","className","map","product","key","_id","title","description","to","disabled","onClick","Component","props","match","href","url","Routes","exact","path","component","Main","Products","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uQAQeA,G,MAJA,kBACb,4BAAQC,GAAG,eAAX,Y,sECDaC,E,OAFHC,EAAMC,OAAQ,CAAEC,QAAS,8CCMhBC,G,iNAEnBC,MAAQ,CACNC,SAAU,GACVC,OAAQ,GACRC,KAAM,G,EAGRC,aAAe,WAAe,IAAdD,EAAa,uDAAN,EACrBR,EAAIU,IAAI,qDAAsD,CAAEC,OAAQ,CAAEH,UAAUI,MAClF,SAAAC,GAAQ,IAAD,EACuBA,EAAIC,KAAxBC,EADH,EACGA,KAASR,EADZ,wBAGL,EAAKS,SACH,CACEV,SAAUS,EACVR,SACAC,a,EAQVS,SAAW,WAAO,IACRT,EAAS,EAAKH,MAAdG,KAEHA,EAAO,GACV,EAAKC,aAAaD,EAAO,I,EAG7BU,SAAW,WAAO,IAAD,EACU,EAAKb,MAAtBG,EADO,EACPA,KAEHA,EAHU,EACDD,OAEKY,OACjB,EAAKV,aAAaD,EAAO,I,mFAK3BY,KAAKX,iB,+BAIG,IAAD,EAC4BW,KAAKf,MAAhCC,EADD,EACCA,SAAUE,EADX,EACWA,KAAMD,EADjB,EACiBA,OACxB,OACE,yBAAKc,UAAU,gBACZf,EAASgB,KACR,SAAAC,GAAO,OACL,6BAASC,IAAKD,EAAQE,KACpB,gCAASF,EAAQG,OACjB,2BAAIH,EAAQI,aACZ,kBAAC,IAAD,CAAMC,GAAE,mBAAcL,EAAQE,MAA9B,eAIN,yBAAKJ,UAAU,WACb,4BAAQQ,SAAmB,IAATrB,EAAYsB,QAASV,KAAKH,UAA5C,cACA,4BAAQY,SAAUrB,IAASD,EAAOY,MAAOW,QAASV,KAAKF,UAAvD,sB,GA5DwBa,cCDbzB,G,iNAEnBD,MAAQ,CACNkB,QAAS,I,mFAGU,IAAD,OAEVxB,EAAOqB,KAAKY,MAAMC,MAAMtB,OAAxBZ,GAERC,EAAIU,IAAJ,6DAA+DX,IAAOa,MACpE,SAAAC,GACE,EAAKG,SACH,CACEO,QAASV,EAAIC,Y,+BAOb,IACAS,EAAYH,KAAKf,MAAjBkB,QAER,OACE,6BAASF,UAAU,gBACjB,gCAAOE,EAAQG,MAAf,KACA,+BAAMH,EAAQI,YAAd,KACA,oCAAS,uBAAGO,KAAMX,EAAQY,KAAjB,IAA0BZ,EAAQY,IAAlC,KAAT,U,GA5B8BJ,cCSvBK,EATA,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,gBAAgBC,UAAWE,OCI9BC,G,MAPH,kBACV,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCgBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCbNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a20bd7bc.chunk.js","sourcesContent":["import React from 'react'\n\nimport './styles.css'\n\nconst Header = () => (\n  <header id=\"main-header\">JSHunt</header>\n)\n\nexport default Header\n","import axios from 'axios'\n\nconst api = axios.create( { baseUrl: \"https://rocketseat-node.herokuapp.com/api\" } )\n\nexport default api","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\n/** serviços */\nimport api from '../../services/api'\n\nimport './styles.css';\n\nexport default class main extends Component {\n\n  state = {\n    products: [],\n    filter: {},\n    page: 1\n  };\n\n  loadProducts = (page = 1) => {\n    api.get('https://rocketseat-node.herokuapp.com/api/products', { params: { page } }).then(\n      res => {\n        const { docs, ...filter } = res.data\n        \n        this.setState(\n          {\n            products: docs,\n            filter,\n            page\n          }\n        )\n      }\n    )\n\n  };\n\n  prevPage = () => {\n    const { page } = this.state\n\n    if ( page > 1 ) {\n      this.loadProducts(page - 1)\n    }\n  }\n  nextPage = () => {\n    const { page, filter } = this.state\n\n    if ( page < filter.pages ) {\n      this.loadProducts(page + 1)\n    }\n  }\n\n  componentDidMount() {\n    this.loadProducts()\n  }\n\n\n  render() {\n    const { products, page, filter } = this.state\n    return (\n      <div className=\"product-list\" >\n        {products.map(\n          product => (\n            <article key={product._id}>\n              <strong>{product.title}</strong>\n              <p>{product.description}</p>\n              <Link to={`products/${product._id}`}>Acessar</Link>\n            </article>\n          )\n        )}\n        <div className=\"actions\" >\n          <button disabled={page === 1} onClick={this.prevPage} > Anterior </button>\n          <button disabled={page === filter.pages} onClick={this.nextPage} > Próximo </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport './style.css'\n\n/** serviços */\nimport api from '../../services/api'\n\nexport default class products extends Component {\n\n  state = {\n    product: {}\n  }\n\n  componentDidMount() {\n\n    const { id } = this.props.match.params\n\n    api.get( `https://rocketseat-node.herokuapp.com/api/products/${id}` ).then(\n      res => {\n        this.setState(\n          {\n            product: res.data\n          }\n        )\n      }\n    )\n  }\n\n  render() {\n    const { product } = this.state\n\n    return (\n      <section className=\"product-info\" >\n        <h1> { product.title } </h1>\n        <p> { product.description } </p>\n        <p> URL: <a href={product.url} > { product.url } </a> </p>\n      </section>\n    )\n  }\n}\n","import React from 'react'\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Main from './pages/main'\nimport Products from './pages/products'\n\nconst Routes = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Main} />\n      <Route path=\"/products/:id\" component={Products} />\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default Routes\n","/** Componentes */\nimport React from 'react';\nimport Header from './components/Header'\nimport Routes from './routes'\n\n/** Estilos */\nimport './styles.css'\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}